#include <iostream>
#include <vector>
//Nuestra empresa desarrolla software para terminales de puntos de venta [TPV] y desea que le añadamos la siguiente funcionalidad a nuestro sistema: a. En su versión para máquinas expendedoras, se pretende minimizar el número de monedas empleado para darle el cambio al cliente. Diseñe un algoritmo greedy que devuelva un número mínimo de monedas (de 0.01, 0.02, 0.05, 0.10, 0.20, 0.50 y 1 euro). b. Nuestra empresa también distribuye máquinas expendedoras de sellos de correos (de 0.54, 0.32, 0.17 y 0.01 euros) y decidimos reutilizar nuestro algoritmo greedy para decidir qué sellos ha de devolver la máquina. Demuestre que el algoritmo greedy no proporciona necesariamente una solución óptima, aun disponiendo de un suministro inagotable de sellos de cada valor. 
//



std::vector<int> minimizeCoins(double amount) {
    std::vector<int> denominations = { 100, 50, 20, 10, 5, 2, 1 };
    std::vector<int> result;

    int remaining = static_cast<int>(amount * 100); // Convertir a céntimos

    for (int denomination : denominations) {
        int numCoins = remaining / denomination;
        remaining = remaining % denomination;
        
        for (int i = 0; i < numCoins; i++) {
            result.push_back(denomination);
        }
    }

    return result;
}

int main() {
    double change = 12.34;

    std::vector<int> coins = minimizeCoins(change);

    std::cout << "Número mínimo de monedas: " << coins.size() << std::endl;
    std::cout << "Monedas utilizadas: ";
    for (int coin : coins) {
        std::cout << coin / 100.0 << " euros ";
    }
    std::cout << std::endl;

    return 0;
}